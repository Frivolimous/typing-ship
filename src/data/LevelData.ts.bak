/** 
 Starting the conversion from ??? to SECONDS
**/

export enum EventType {
  LOOP,
  WAIT,
  SPAWN,
  BOSS,
}

export interface ILevelEvent {
  distance: number;
  type: EventType;
  jumpIndex?: number;
  waitTime?: number;
  spawnEvent?: ISpawnEvent;
  bossType?: number;
}

export interface ISpawnEvent {
  type: string;
  x: number;
  y: number;
  commands: ICommand[];
}

export interface ICommand {
  x?: number;
  y?: number;
  timer?: number;
  move?: boolean;
  fire?: boolean;
}

export function getLevel(level: number, gameSpeed: number = 1): ILevelEvent[] {
  // let pack = new MethodPack(Math.max(1 - wpm / 300, 0.5));
  let pack = new MethodPack(gameSpeed);

  switch (level) {
    case -2:
      pack.missile('sn', 1, 2, 0, 2, 8, 2, 0);
      pack.missile('mn', 5, 6, 0, 6, 8, 6, 0);
      pack.missile('lb', 5, 8, 0, 8, 8, 8, 0);
      pack.wait(5);
      pack.laser('sn', 5, 2, 0);
      pack.laser('mn', 5, 5, 0);
      pack.laser('lb', 5, 10, 0);
      pack.suicide('mn', 5, 0, 3, 3, 3);
      pack.suicide('sn', 5, 8.5, 0, 8.5, 6);
      pack.stealth(5, 6, 4, 6, 0);
      break;
    case -1:
      pack.boss(0.01, 0);
      break;
    case 0:
      pack.missile('sn', 4, 5, 0, 5, 6, 4, 12);
      pack.mirror();

      pack.wait(12);
      pack.missile('sn', 0, 0, 3, 7, 3, 12, 3);
      pack.missile('sn', 0.8, 12, 6, 5, 6, 0, 6);
      pack.repeat(0.8, 3, 2);

      pack.wait(8);
      pack.laser('sn', 0, 6, 0);

      pack.wait(8);
      pack.missile('sn', 0, 3, 0, 7, 5, 4, 5, 7, 0);
      pack.repeat(1, 5);
      pack.laser('sn', 0, 12, 5);

      pack.wait(10);
      pack.missile('sn', 0, 2, 0, 2, 4, 12, 9);
      pack.repeat(0.8, 7, 1, true);
      pack.laser('sn', 0, 0, 6);
      pack.insert(-4);
      pack.laser('sn', 0, 12, 6);
      pack.insert(-4);

      pack.wait(12);
      pack.laser('sn', 0, 0, 3);
      pack.laser('sn', 0.4, 12, 3);
      pack.laser('sn', 0.4, 0, 6);
      pack.laser('sn', 0.4, 12, 6);

      pack.wait(10);
      pack.missile('sn', 0, 3, 0, 4, 4, 7, 0);
      pack.missile('sn', 0.8, 12, 5, 7, 6, 0, 5);
      pack.repeat(1.5, 4, 2);
      pack.laser('sn', 3, 0, 2);
      pack.laser('sn', 0.5, 12, 2);
      pack.laser('sn', 1.5, 0, 4);
      pack.laser('sn', 0.5, 12, 4);
      pack.missile('sn', 5, 9, 0, 8, 4, 5, 0);
      pack.missile('sn', 0.8, 0, 5, 5, 6, 12, 5);
      pack.repeat(1.5, 4, 2);
      break;

    case 1:
      pack.wait(8.2);
      pack.missile('sn', 0, 4, 0, 4, 7, 0, 12);
      pack.missile('sn', 0, 2, 0, 2, 6, 0, 9);
      pack.repeat(0, 1, 2, true);

      pack.wait(9.84);
      pack.missile('sn', 0, 0, 3, 7, 3, 12, 3);
      pack.offset(0, 0, 1);
      pack.repeat(1.23, 1, 2);
      pack.missile('sn', 1.64, 12, 5, 5, 5, 0, 5);
      pack.offset(0, 0, 1);
      pack.repeat(1.23, 1, 2);
      pack.laser('ss', 0, 6, 0);

      pack.wait(11.48);
      pack.suicide('mn', 0, 3, 0, 3, 3);
      pack.repeat(0.656, 3, 1, true);

      pack.wait(8.2);
      pack.suicide('mn', 0, 0, 2, 8, 2);
      pack.mirror(0.41);
      pack.suicide('mn', 0.03, 3, 0, 3, 3);
      pack.mirror(0.082);
      pack.repeat(0.82, 5, 4);

      pack.wait(12.3);
      pack.missile('sn', 0, 0, 3, 7, 4, 12, 7);
      pack.repeat(1.64, 9, 1, true);
      pack.laser('ss', 0, 4, 0);
      pack.insert(-6);
      pack.laser('ss', 0, 8, 0);
      pack.insert(-2);
      pack.suicide('mn', 4.1, 1, 0, 4, 4);
      pack.repeat(0.82, 3, 1, true);

      pack.wait(9.84);
      pack.laser('ss', 0, 0, 3);
      pack.laser('ss', 0.41, 12, 3);
      pack.laser('ss', 0.82, 0, 6);
      pack.laser('ss', 0.41, 12, 6);

      pack.wait(14.76);
      pack.missile('sn', 0, 2, 0, 2, 6, 0, 7);
      pack.missile('sn', 0, 3, 0, 3, 6, 12, 9);
      pack.repeat(2.46, 4, 2, true);
      pack.suicide('mn', 3.28, 0, 3, 4, 5);
      pack.repeat(0.41, 3, 1, true);

      pack.wait(10.66);
      pack.laser('sn', 0, 0, 3);
      pack.laser('sn', 0.41, 12, 3);
      pack.laser('sn', 0.82, 0, 6);
      pack.laser('sn', 0.41, 12, 6);
      pack.suicide('mn', 2.05, 2, 12, 3, 4);
      pack.repeat(0.41, 7, 1, true);

      pack.wait(16.4);
      pack.suicide('mn', 0, 0, 7, 3, 6);
      pack.mirror();
      pack.suicide('mn', 0.82, 0, 2, 6, 3);
      pack.mirror();
      pack.suicide('mn', 0.82, 0, 4, 4, 3);
      pack.mirror();
      pack.suicide('mn', 0.82, 5, 0, 5, 1);
      pack.mirror();

      pack.wait(9.84);
      pack.missile('sn', 0, 3, 0, 6, 7, 12, 8);
      pack.repeat(1.64, 11, 1, true);
      pack.laser('ss', 0, 0, 6);
      pack.insert(-7);
      pack.laser('ss', 0, 12, 6);
      pack.insert(-3);
      pack.laser('mn', 0, 6, 0);
      pack.suicide('mn', 2.46, 0, 2, 6, 3);
      pack.repeat(0.82, 3, 1, true);

      break;

    case 2:
      pack.wait(0.1);
      pack.missile('sn', 0, 6, 0, 6, 5, 0, 9);
      pack.repeat(0.01, 5, 1, true);

      pack.wait(0.1);
      pack.missile('sn', 0, 0, 1, 5, 4, 0, 8);
      pack.mirror();
      pack.repeat(0.03, 3, 2, true);
      pack.laser('sn', 0, 0, 6);
      pack.insert(-6);
      pack.laser('sn', 0, 12, 6);
      pack.insert(-4);
      pack.laser('mn', 0, 6, 0);

      pack.wait(0.17);
      pack.missile('sn', 0, 3, 0, 3, 4, 12, 11);
      pack.missile('sn', 0, 4, 0, 5, 4, 8, 0);
      pack.repeat(0.025, 3, 2);
      pack.laser('sn', 0.01, 2, 0);
      pack.mirror();
      pack.missile('sn', 0.09, 12, 3, 8, 3, 1, 12);
      pack.missile('sn', 0, 12, 4, 8, 5, 12, 8);
      pack.repeat(0.025, 3, 2);
      pack.laser('sn', 0.01, 0, 6);
      pack.mirror();
      pack.suicide('mn', 0.09, 0, 3, 3, 3);
      pack.repeat(0.01, 3);

      pack.wait(0.13);
      pack.laser('sn', 0, 0, 3);
      pack.mirror();
      pack.laser('mn', 0, 6, 0);
      pack.laser('sn', 0.01, 0, 6);
      pack.mirror();

      pack.wait(0.18);
      pack.missile('sn', 0, 2, 0, 2, 7, 2, 12);
      pack.offset(0, 1, 0);
      pack.repeat(0.015, 1, 2);
      pack.repeat(0.05, 1, 4, true);
      pack.laser('mn', 0, 0, 4);
      pack.missile('sn', 0.05, 0, 2, 7, 2, 12, 2);
      pack.offset(0, 0, 1);
      pack.repeat(0.015, 1, 2);
      pack.laser('mn', 0, 12, 4);
      pack.missile('sn', 0.05, 12, 5, 5, 5, 0, 5);
      pack.offset(0, 0, 1);
      pack.repeat(0.015, 1, 2);

      pack.wait(0.2);
      pack.missile('sn', 0, 0, 12, 4, 4, 12, 9);
      pack.repeat(0.006, 3, 1, true);
      pack.laser('mn', 0.01, 4, 0);
      pack.mirror(0.01);
      pack.suicide('mn', 0.05, 0, 3, 3, 3);
      pack.repeat(0.015, 7, 1, true);

      pack.wait(0.15);
      pack.laser('mn', 0, 0, 7);
      pack.mirror();
      pack.laser('sn', 0.015, 0, 4);
      pack.mirror();
      pack.laser('mn', 0.02, 3, 0);
      pack.mirror();
      pack.laser('sn', 0.015, 5, 0);
      pack.mirror();

      pack.wait(0.2);
      pack.missile('sn', 0, 6, 0, 6, 4, 0, 0);
      pack.mirror(0.027);
      pack.missile('sn', 0.027, 6, 0, 6, 6, 0, 9);
      pack.mirror(0.028);
      pack.repeat(0.028, 4, 4);
      pack.laser('sn', 0, 0, 3);
      pack.insert(-18);
      pack.laser('sn', 0, 12, 3);
      pack.insert(-15);
      pack.laser('sn', 0, 0, 6);
      pack.insert(-12);
      pack.laser('sn', 0, 12, 6);
      pack.insert(-9);
      pack.laser('mn', 0, 3, 0);
      pack.insert(-6);
      pack.laser('mn', 0, 9, 0);
      pack.insert(-3);
      pack.suicide('ms', 0.08, 0, 12, 3, 4);
      pack.repeat(0.015, 7, 1, true);

      break;
    case 3:
      pack.wait(0.1);
      pack.missile('sn', 0, 0, 3, 3, 5, 8, 0);
      pack.repeat(0.02, 5, 1, true);
      pack.laser('ss', 0.02, 5, 0);
      pack.mirror(0.02);
      pack.suicide('mn', 0.02, 0, 2, 6, 3);
      pack.mirror(0.02);
      pack.suicide('mn', 0.02, 0, 4, 6, 5);
      pack.mirror(0.02);
      pack.repeat(0.02, 1, 4);
      pack.laser('ms', 0.02, 0, 2);
      pack.mirror(0.02);

      pack.wait(0.2);
      pack.boss(0, 0);
      break;
    case 4:
      pack.missile('sn', 0.05, 5, 0, 5, 6, 4, 12);
      pack.mirror();

      pack.wait(0.15);
      pack.missile('sn', 0, 0, 3, 7, 3, 12, 3);
      pack.missile('sn', 0.01, 12, 6, 5, 6, 0, 6);
      pack.repeat(0.01, 3, 2);
      pack.laser('ss', 0.03, 3, 0);
      pack.mirror();
      pack.laser('ss', 0.02, 0, 9);
      pack.mirror();

      pack.wait(0.25);
      pack.missile('sn', 0, 6, 0, 6, 5, 0, 10);
      pack.repeat(0.015, 7, 1, true);
      pack.laser('ss', 0.015, 0, 3);
      pack.mirror();
      pack.missile('sn', 0.015, 1, 0, 5, 4, 12, 5);
      pack.repeat(0.015, 5, 1, true);
      pack.laser('ss', 0.02, 3, 0);
      pack.mirror();

      pack.wait(0.2);
      pack.missile('sn', 0, 5, 0, 5, 6, 1, 12);
      pack.mirror();
      pack.repeat(0.03, 3, 2);
      pack.laser('ms', 0.03, 0, 9);
      pack.mirror();

      pack.wait(0.25);
      pack.laser('ms', 0, 6, 0);
      pack.laser('ss', 0.01, 0, 3);
      pack.mirror(0.01);
      pack.offset(0.02, 0, 3);
      pack.mirror(0.02);

      pack.wait(0.25);
      pack.suicide('sn', 0, 1.5, 0, 1.5, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.suicide('sn', 0.028, 3, 0, 3, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.repeat(0.028, 3, 7);

      pack.wait(0.25);
      pack.missile('sn', 0, 0, 4, 3, 6, 6, 0);
      pack.repeat(0.03, 11, 1, true);
      pack.laser('ss', 0, 2, 0);
      pack.insert(-9);
      pack.laser('ss', 0, 4, 0);
      pack.insert(-6);
      pack.laser('ss', 0, 10, 0);
      pack.insert(-3);
      pack.laser('ss', 0, 8, 0);

      pack.wait(0.25);
      pack.missile('sn', 0.2, 12, 2, 7, 3, 0, 2);
      pack.missile('sn', 0.015, 1, 12, 5, 6, 12, 8);
      pack.repeat(0.03, 5, 2);
      pack.laser('ms', 0, 0, 6);
      pack.insert(-8);
      pack.laser('ms', 0, 12, 6);
      pack.insert(-6);
      pack.laser('ms', 0, 6, 0);
      pack.insert(-4);
      break;

    case 5:
      pack.missile('ss', 0.05, 5, 0, 5, 4, 2, 0);
      pack.mirror();
      pack.repeat(0.03, 1, 2);
      pack.missile('sn', 0.03, 5, 0, 5, 4, 2, 0);
      pack.mirror();
      pack.repeat(0.03, 1, 2);

      pack.wait(0.1);
      pack.missile('ss', 0, 6, 0, 6, 5, 0, 10);
      pack.repeat(0.06, 5, 1, true);
      pack.missile('sn', 0, 1, 0, 2, 4, 3, 0);
      pack.missile('sn', 0, 2, 0, 3, 4, 4, 0);
      pack.repeat(0, 1, 2);
      pack.insert(-10);
      pack.insert(-9);
      pack.insert(-7);
      pack.insert(-6);
      pack.missile('sn', 0, 12, 1, 8, 2, 12, 3);
      pack.missile('sn', 0, 12, 2, 8, 3, 12, 4);
      pack.repeat(0, 1, 2);
      pack.insert(-6);
      pack.insert(-5);
      pack.insert(-3);
      pack.insert(-2);

      pack.wait(0.15);
      pack.missile('ss', 0, 9, 0, 9, 6, 9, 12);
      pack.offset(0, 1);
      pack.missile('mn', 0.02, 2, 0, 2, 6, 2, 12);
      pack.offset(0, 2);
      pack.missile('sn', 0.04, 0, 2, 5, 4, 12, 7);
      pack.repeat(0.01, 3, 1, true);

      pack.wait(0.15);
      pack.missile('sn', 0, 1, 0, 1, 6, 1, 12);
      pack.offset(0, 1);
      pack.repeat(0.04, 1, 2);
      pack.missile('mn', 0.02, 10, 0, 10, 6, 10, 12);
      pack.repeat(0.03, 3, 3);
      pack.laser('ms', 0, 5, 0);
      pack.mirror();
      pack.insert(-4);

      pack.wait(0.32);
      pack.suicide('sn', 0, 1.5, 0, 1.5, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.repeat(0.035, 7, 4, true);

      pack.wait(0.3);
      pack.missile('ss', 0, 6, 0, 6, 5, 0, 9);
      pack.missile('mn', 0.01, 0, 8, 4, 5, 5, 0);
      pack.mirror();
      pack.repeat(0.07, 3, 3, true);
      pack.laser('ms', 0, 2, 0);
      pack.insert(-9);
      pack.laser('ms', 0, 10, 0);
      pack.insert(-6);

      pack.wait(0.2);
      pack.missile('mn', 0, 2, 0, 2, 5, 2, 12);
      pack.missile('ss', 0, 3, 0, 3.5, 5, 7, 0);
      pack.repeat(0.05, 3, 2);
      pack.missile('mn', 0.03, 12, 2, 5, 5, 2, 12);
      pack.missile('ss', 0, 12, 3.5, 7, 5, 12, 7);
      pack.repeat(0.05, 3, 2);
      pack.suicide('ms', 0.06, 0, 12, 3, 4);
      pack.repeat(0.015, 3, 1, true);
      break;

    case 6:
      pack.missile('mn', 0.05, 2, 0, 2, 7, 2, 12);
      pack.mirror();
      pack.missile('mn', 0, 4, 0, 4, 6, 2, 12);
      pack.mirror();

      pack.wait(0.15);
      pack.missile('ms', 0, 1, 0, 5, 4, 11, 12);
      pack.mirror();
      pack.missile('mn', 0.01, 0, 10, 3, 6, 0, 3);
      pack.repeat(0.01, 3, 1, true);

      pack.wait(0.2);
      pack.missile('ms', 0, 0, 4, 7, 4, 12, 4);
      pack.offset(0.02, 0, 2);
      pack.repeat(0.03, 3, 2);
      pack.laser('ms', 0.04, 0, 2);
      pack.laser('ms', 0.04, 0, 8);

      pack.wait(0.25);
      pack.missile('ms', 0, 2, 0, 2, 7, 2, 12);
      pack.missile('ms', 0.01, 3, 0, 5, 5, 12, 7);
      pack.repeat(0.06, 1, 2);
      pack.missile('mn', 0.05, 2, 0, 2, 7, 2, 12);
      pack.missile('mn', 0.01, 3, 0, 5, 5, 12, 7);
      pack.repeat(0.06, 3, 2);
      pack.laser('ss', 0, 12, 3);
      pack.insert(-7);
      pack.laser('ss', 0, 8, 0);
      pack.insert(-4);
      pack.laser('ss', 0, 6, 0);
      pack.insert(-1);

      pack.wait(0.2);
      pack.missile('ms', 0, 5, 0, 5, 6, 0, 10);
      pack.mirror();
      pack.missile('mn', 0.02, 3, 0, 3, 4, 0, 7);
      pack.repeat(0.035, 11, 1, true);
      pack.laser('ms', 0, 0, 3);
      pack.insert(-8);
      pack.laser('ms', 0, 12, 3);
      pack.insert(-6);

      pack.wait(0.2);
      pack.missile('ms', 0, 3, 0, 3, 7, 2, 12);
      pack.mirror();
      pack.missile('ms', 0.04, 4, 0, 4, 6, 2, 12);
      pack.mirror();
      pack.missile('ms', 0.04, 5, 0, 5, 5, 2, 12);
      pack.mirror();
      pack.missile('mn', 0.07, 3, 0, 3, 7, 2, 12);
      pack.mirror();
      pack.missile('mn', 0.04, 4, 0, 4, 6, 2, 12);
      pack.mirror();
      pack.missile('mn', 0.04, 5, 0, 5, 5, 2, 12);
      pack.mirror();

      pack.wait(0.2);
      pack.laser('mn', 0, 0, 3);
      pack.mirror();
      pack.laser('sn', 0.01, 0, 6);
      pack.mirror();
      pack.laser('ln', 0, 6, 0);

      pack.wait(0.35);
      pack.suicide('ss', 0, 1.4, 0, 1.4, 6);
      pack.offset(0, 3.8);
      pack.offset(0, 3.8);
      pack.repeat(0.05, 4, 3, true);
      break;

    case 7:
      pack.wait(0.1);
      pack.suicide('sn', 0, 1.5, 0, 1.5, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.laser('ms', 0.04, 3, 0);
      pack.mirror();

      pack.suicide('sn', 0.09, 1.5, 0, 1.5, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.missile('mn', 0.02, 0, 2, 6, 2, 12, 2);
      pack.missile('mn', 0.02, 12, 4, 6, 4, 0, 4);

      pack.suicide('sn', 0.09, 1.5, 0, 1.5, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.missile('ss', 0.02, 3, 0, 3, 6, 2, 12);
      pack.mirror(0.02);

      pack.suicide('ss', 0.09, 1.5, 0, 1.5, 6);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.offset(0, 3);
      pack.missile('ms', 0.02, 0, 2, 3, 6, 0, 9);
      pack.mirror(0.02);

      pack.wait(0.2);
      pack.boss(0, 1);
      break;

    case 8:
      pack.missile('sn', 0.07, 0, 2, 4, 2, 0, 7);
      pack.repeat(0.008, 5, 1, true);

      pack.missile('sn', 0.05, 0, 3, 5, 4, 12, 8);
      pack.repeat(0.015, 9, 1, true);
      pack.laser('ln', 0, 3, 0);
      pack.insert(-7);
      pack.laser('ln', 0, 9, 0);
      pack.insert(-5);
      pack.laser('ln', 0, 6, 0);
      pack.missile('sn', 0.02, 1, 12, 4, 6, 12, 2);
      pack.repeat(0.02, 5, 1, true);

      pack.wait(0.17);
      pack.missile('sn', 0, 12, 12, 8, 3, 2, 6, 12, 7);
      pack.repeat(0.01, 12, 1);
      pack.laser('ln', 0, 3, 0);
      pack.insert(-10);
      pack.laser('ln', 0, 9, 0);
      pack.insert(-5);
      pack.suicide('mn', 0.05, 0, 0, 3, 4);
      pack.repeat(0.01, 3);

      pack.wait(0.23);
      pack.laser('ms', 0, 4, 0);
      pack.mirror(0.01);
      pack.laser('ls', 0.01, 6, 0);
      pack.laser('ss', 0.04, 0, 4);
      pack.mirror(0.022);
      pack.offset(0.022, 0, 3);
      pack.mirror(0.022);

      pack.wait(0.22);
      pack.missile('ss', 0, 0, 12, 4, 3, 10, 6, 0, 6);
      pack.repeat(0.03, 7, 1);
      pack.laser('ls', 0, 5, 0);
      pack.insert(-5);
      pack.laser('ls', 0, 7, 0);
      pack.insert(-1);

      pack.wait(0.13);
      pack.suicide('mn', 0, 12, 0, 9, 4);
      pack.repeat(0.01, 3);

      pack.wait(0.3);
      pack.laser('ls', 0, 2, 0);
      pack.offset(0.01, 2);
      pack.offset(0.01, 2);
      pack.offset(0.01, 2);
      pack.offset(0.01, 2);

      pack.wait(0.13);
      pack.suicide('mn', 0, 0, 12, 2, 5);
      pack.repeat(0.01, 7, 1, true);
      break;
    case 9:
      pack.missile('ln', 0.05, -1, -1, 5, 6, 13, 13);
      pack.mirror(0.01);

      pack.wait(0.1);
      pack.missile('mn', 0, 0, 1, 9, 3, 0, 6);
      pack.missile('mn', 0.013, 12, 8, 3, 6, 12, 3);
      pack.repeat(0.013, 3, 2);
      pack.missile('ln', 0.03, -1, 3, 6, 5, 13, 3);
      pack.missile('ln', 0, 13, 5, 6, 3, -1, 4);
      pack.laser('lb', 0.06, 4.5, 0);
      pack.laser('lb', 0.01, 7.5, 0);

      pack.wait(0.3);
      pack.missile('ln', 0, 3, -1, 3, 5, 3, 13);
      pack.mirror();
      pack.missile('ln', 0.04, -1, 1, 6, 3, 9, 13);
      pack.mirror();
      pack.laser('lt', 0.04, 0, 5);
      pack.mirror();

      pack.wait(0.14);
      pack.missile('mn', 0, 0, 1, 5, 5, 12, 1);
      pack.missile('mn', 0, 0, 9, 6, 6, 0, 3);
      pack.missile('mn', 0, 12, 9, 7, 5, 0, 9);
      pack.missile('mn', 0, 12, 1, 6, 4, 12, 10);

      pack.wait(0.14);
      pack.missile('ss', 0, 2, 12, 2, 3, 9, 2.5, 10, 12);
      pack.repeat(0.01, 7);
      pack.missile('ls', 0.07, -1, 6, 8, 6, 13, 6);
      pack.offset(0, 0, 2);
      pack.laser('lb', 0.05, 0, 7);

      pack.wait(0.1);
      pack.ship('lmt', 0, 3, 0, [pack.move(3, 3), pack.halt(15), pack.halt(10, true), pack.move(0, 3)]);
      pack.mirror();
      pack.ship('lmt', 0.05, 5, 0, [pack.move(5, 3), pack.halt(15), pack.halt(10, true), pack.move(0, 3)]);
      pack.mirror();
      pack.missile('mn', 0.06, 0, 12, 4, 7, 4, 0);
      pack.mirror();
      pack.missile('mn', 0.03, 6, 0, 6, 5, 1, 12);
      pack.mirror();

      pack.wait(0.23);
      pack.missile('ms', 0, 2, 0, 2, 6, 6, 4, 10, 12);
      pack.mirror(0.018);
      pack.missile('mn', 0.018, 2, 0, 2, 6, 6, 4, 10, 12);
      pack.repeat(0.018, 5, 1, true);
      pack.missile('ln', 0.04, -1, -1, 2, 3, -1, 13);
      pack.mirror();
      pack.laser('lb', 0.05, 6, 0);

      pack.wait(0.35);
      pack.laser('lb', 0, 4, 0);
      pack.mirror();
      pack.stealth(0.05, 3, 5, 0, 12);
      pack.mirror(0.01);
      pack.stealth(0.01, 6, 4, 6, 0);
      break;
    case 10:
      pack.missile('lb', 0.03, 2, -1, 2, 13);
      pack.mirror();
      pack.missile('lb', 0.05, -1, 2, 13, 2);
      pack.mirror();
      pack.laser('lb', 0.05, 0, 5);
      pack.mirror();
      pack.missile('lb', 0.05, 3, -1, 3, 6, 1, 13);
      pack.mirror();
      pack.missile('ss', 0.03, 6, 0, 6, 5, 1, 0);
      pack.repeat(0.03, 3, 1, true);

      pack.wait(0.1);
      pack.missile('sn', 0, 2, 12, 2, 3, 8, 4, 10, 12);
      pack.repeat(0.01, 13, 1, true);
      pack.laser('ss', 0.02, 5, 0);
      pack.mirror();
      pack.missile('sn', 0.05, 2, 0, 2, 7, 2, 12);
      pack.repeat(0.01, 5, 1, true);
      pack.stealth(0.05, 6, 7, 6, 0);

      pack.wait(0.1);
      pack.missile('sn', 0, 6, 0, 6, 5, 3, 2, 12, 7);
      pack.repeat(0.014, 9);
      pack.missile('lb', 0.03, 2, -1, 2, 7, 2, 13);
      pack.mirror(0.02);
      pack.laser('ss', 0.04, 4, 0);
      pack.mirror(0.02);
      pack.stealth(0.07, 5, 3, 0, 6);
      pack.stealth(0.02, 8, 5, 12, 7);

      pack.wait(0.2);
      pack.missile('lb', 0, 2, -1, 5, 4, 2, 13);
      pack.mirror();
      pack.laser('sn', 0.02, 0, 7);
      pack.mirror(0.015);
      pack.offset(0.015, 0, -2);
      pack.mirror(0.015);
      pack.offset(0.015, 0, -2);
      pack.mirror(0.015);
      pack.laser('sn', 0.015, 3, 0);
      pack.mirror(0.015);
      pack.laser('sn', 0.015, 7, 0);
      pack.mirror(0.015);

      pack.wait(0.2);
      pack.missile('mn', 0, 0, 2, 6, 4, 12, 2);
      pack.repeat(0.02, 3);
      pack.missile('sn', 0.01, 12, 3, 6, 5, 0, 3);
      pack.clone(0.01, -2);
      pack.repeat(0.01, 4, 2);
      pack.clone(0.01, -2);
      pack.repeat(0.02, 3);
      pack.laser('lb', 0.01, 0, 6);
      pack.mirror(0.01);
      pack.stealth(0.05, 5, 5, 5, 0);
      pack.mirror(0.03);

      pack.wait(0.3);
      pack.suicide('sn', 0, 1.4, 0, 1.4, 6);
      pack.offset(0, 3.8);
      pack.offset(0, 3.8);
      pack.repeat(0.03, 2, 3, true);
      pack.missile('sn', 0, 0, 6, 6, 7, 12, 10);
      pack.repeat(0.01, 7);
      pack.missile('mn', 0, 2, 0, 2, 5, 1, 12);
      pack.mirror();
      pack.missile('mn', 0.06, 4, 0, 4, 5, 1, 12);
      pack.mirror();
      pack.missile('ln', 0, 13, 5, 6, 7, -1, 10);

      pack.wait(0.18);
      pack.laser('ms', 0, 4, 0);
      pack.mirror(0.01);
      pack.laser('ls', 0.01, 6, 0);
      pack.laser('ss', 0.06, 0, 4);
      pack.mirror(0.02);
      pack.offset(0.02, 0, 3);
      pack.mirror(0.02);
      pack.stealth(0.05, 4, 5, 0, 12);
      pack.mirror(0.02);

      pack.wait(0.2);
      pack.suicide('mn', 0, 3, 0, 5, 2);
      pack.mirror();
      pack.repeat(0.06, 1, 2);
      pack.suicide('mn', 0, 0, 0, 2, 2);
      pack.mirror();
      pack.repeat(0.06, 1, 4);
      pack.suicide('mn', 0, 0, 7, 3, 6);
      pack.mirror();
      pack.repeat(0.06, 1, 6);
      pack.suicide('ms', 0, 5, 0, 5, 3);
      pack.mirror();
      break;
    case 11:
      pack.wait(0.1);
      pack.missile('ln', 0, 1, -1, 4, 6, -1, 13);
      pack.mirror();
      pack.laser('ln', 0.06, 0, 5);
      pack.mirror();

      pack.missile('ls', 0.09, -1, 2, 6, 3.5, 13, 5);
      pack.missile('ls', 0, 13, 8, 6, 6.5, -1, 5);
      pack.laser('ls', 0.06, 3, 0);
      pack.mirror();

      pack.missile('lt', 0.09, 5, -1, 5, 4, -1, 8);
      pack.mirror();
      pack.laser('lt', 0.09, 0, 3);
      pack.mirror();

      pack.missile('lb', 0.09, -1, 1, 4, 2, -1, 12);
      pack.mirror();
      pack.laser('lb', 0.09, 5, 0);
      pack.mirror();

      pack.wait(0.2);
      pack.stealth(0, 3, 4, 0, 5);
      pack.mirror(0.024);
      pack.stealth(0.024, 6, 3, 6, 0, true);

      pack.boss(0.02, 2);
      break;

    default: throw (new Error('Level number OOB: ' + level));
  }
  return pack.array;
}

export function boss0Suicides(wpm: number = 60): ILevelEvent[] {
  let pack = new MethodPack(Math.max(1 - wpm / 300, 0.5));

  // 600,550
  pack.ship('msn', 0, 1.6, 3, [pack.halt(16), pack.fire()]);
  pack.ship('msn', 0, 2.2, 3.4, [pack.halt(13), pack.fire()]);
  pack.ship('msn', 0, 2.8, 3.7, [pack.halt(10), pack.fire()]);
  pack.ship('msn', 0, 6.8, 3.7, [pack.halt(10), pack.fire()]);
  pack.ship('msn', 0, 7.4, 3.4, [pack.halt(13), pack.fire()]);
  pack.ship('msn', 0, 8, 3, [pack.halt(16), pack.fire()]);
  return pack.array;
}

export function getBossLoop(bossType: number, wpm: number = 60): ILevelEvent[] {
  let pack = new MethodPack(Math.max(1 - wpm / 300, 0.5));

  switch (bossType) {
    case 0:
      pack.wait(0.3);
      pack.missile('sn', 0, 0, 4, 7, 6, 12, 6);
      pack.missile('sn', 0.015, 12, 3, 5, 5, 0, 5);
      pack.repeat(0.015, 2, 2);

      pack.wait(0.2);
      pack.laser('ss', 0, 0, 9);
      pack.mirror(0.01);
      break;
    case 1:
      pack.wait(0.25);
      pack.missile('mn', 0, 0, 3 + Math.random() * 3, 5, 6, 12, 7);
      pack.mirror();
      pack.repeat(0.03, 1, 2);

      pack.wait(0.35);
      pack.laser('ms', 0, 0, 8);
      pack.mirror(0.01);
      break;
    case 2:
      pack.wait(0.3);
      pack.laser('ms', 0, 0, 6 + Math.random() * 3);
      pack.mirror();
      pack.wait(0.3);
      pack.missile('mn', 0, 0, 0, 2, 4, 5, 6, 12, 10);
      pack.repeat(0.02, 5, 1, true);
      pack.wait(0.3);
      pack.stealth(0, 2 + Math.random() * 8, 5 + Math.random() * 2, (Math.random() > 0.5 ? 0 : 12), 5);
      break;
  }
  return pack.array;
}

class MethodPack {
  public array: ILevelEvent[] = [];
  private distance: number = 0;

  constructor(private gameSpeed: number) { }

  public setDist(distance: number) {
    // if (distance>=0.1){
    //   distance*=this.mult;
    // }
    distance /= this.gameSpeed;
    this.distance += distance;
  }

  public wait(distance: number = 0): ILevelEvent {
    // this.setDist(distance);
    distance /= 1 + (this.gameSpeed - 1) / 2;
    this.distance += distance;
    let m: ILevelEvent = { type: EventType.WAIT, distance: this.distance, waitTime: distance };

    this.array.push(m);
    return m;
  }

  public insert(insertAt: number) {
    if (insertAt < 0) {
      insertAt = this.array.length + insertAt;
    }
    this.array[this.array.length - 1].distance = this.array[insertAt].distance;
    this.array.splice(insertAt, 0, this.array.pop());
  }

  public ship(type: string, distance: number, x: number, y: number, commands: ICommand[] = null) {
    this.setDist(distance);
    this.array.push({ type: EventType.SPAWN, distance: this.distance, spawnEvent: { type, x, y, commands } });
  }

  public laser(type: string, distance: number, x: number, y: number, speed: number = 0) {
    let commands: ICommand[];

    if (x === 0) {
      commands = [this.move(2, y), this.halt(10 - speed), this.halt(20 - speed, true), this.move(-2, y)];
    } else if (x === 12) {
      commands = [this.move(10, y), this.halt(10 - speed), this.halt(20 - speed, true), this.move(14, y)];
    } else if (y === 0) {
      commands = [this.move(x, 2), this.halt(10 - speed), this.halt(20 - speed, true), this.move(x, -2)];
    } else if (y === 12) {
      commands = [this.move(x, 10), this.halt(10 - speed), this.halt(20 - speed, true), this.move(x, 14)];
    } else {
      throw (new Error('Invalid spawn location: ' + x + ' ' + y));
    }
    this.ship(type.charAt(0) + 'l' + type.charAt(1), distance, x, y, commands);
  }

  public suicide(_type: string, _distance: number, _x: number, _y: number, _xTo: number, _yTo: number) {
    this.ship(_type.charAt(0) + 's' + _type.charAt(1), _distance, _x, _y, [this.move(_xTo, _yTo), this.fire()]);
  }

  public stealth(_distance: number, _x: number, _y: number, _xTo: number, _yTo: number, _shield: boolean = false) {
    this.ship(_shield ? 'xms' : 'xmn', _distance, _x, _y, [this.halt(8), this.halt(10, true), this.halt(10, true), this.halt(10, true), this.halt(10, true), this.halt(5, true), this.move(_xTo, _yTo)]);
  }

  public missile(_type: string, _distance: number, _x: number, _y: number, _xTo1: number, _yTo1: number, _xTo2: number = -1, _yTo2: number = -1, _xTo3: number = -1, _yTo3: number = -1) {
    this.ship(_type.charAt(0) + 'm' + _type.charAt(1), _distance, _x, _y, [this.move(_xTo1, _yTo1), this.move(_xTo2, _yTo2, ((_xTo3 === -1) ? true : false)), ((_xTo3 !== -1) ? this.move(_xTo3, _yTo3, true) : this.halt(1))]);
  }

  public boss(_distance: number, _type: number) {
    this.setDist(_distance);
    this.array.push({ type: EventType.BOSS, distance: this.distance, bossType: _type });
  }

  public clone(_distance: number = 0, index: number = -1) {
    this.setDist(_distance);

    if (index < 0) {
      index = this.array.length + index;
    }
    let oldSpawn = this.array[index].spawnEvent;

    let commands: ICommand[] = this.cloneCommands(oldSpawn.commands);

    this.array.push({ type: EventType.SPAWN, distance: this.distance, spawnEvent: { type: oldSpawn.type, x: oldSpawn.x, y: oldSpawn.y, commands } });
  }

  public mirror(distance: number = 0, index: number = -1) {
    this.setDist(distance);

    if (index < 0) {
      index = this.array.length + index;
    }
    let oldSpawn = this.array[index].spawnEvent;

    let commands: ICommand[] = this.mirrorCommands(oldSpawn.commands);

    this.array.push({ type: EventType.SPAWN, distance: this.distance, spawnEvent: { type: oldSpawn.type, x: 12 - oldSpawn.x, y: oldSpawn.y, commands } });
  }

  public offset(_distance: number = 0, xOff: number = 0, yOff: number = 0, index: number = -1) {
    this.setDist(_distance);

    if (index < 0) {
      index = this.array.length + index;
    }
    let oldSpawn = this.array[index].spawnEvent;

    let commands: ICommand[] = this.cloneCommands(oldSpawn.commands, xOff, yOff);

    this.array.push({ type: EventType.SPAWN, distance: this.distance, spawnEvent: { type: oldSpawn.type, x: oldSpawn.x + xOff, y: oldSpawn.y + yOff, commands } });
  }

  public repeat(distance: number, repeatN: number = 1, repeatC: number = 1, reverse?: boolean) {
    // pack.repeat(0.82, 3, 2);
    for (let i = 0; i < repeatN * repeatC; i++) {
      if (i % repeatC === 0) {
        if (reverse) {
          this.mirror(distance, 0 - repeatC);
        } else {
          this.clone(distance, 0 - repeatC);
        }
      } else {
        if (reverse) {
          this.mirror((this.array[this.array.length - repeatC].distance - this.array[this.array.length - repeatC - 1].distance) * this.gameSpeed, 0 - repeatC);
        } else {
          this.clone((this.array[this.array.length - repeatC].distance - this.array[this.array.length - repeatC - 1].distance) * this.gameSpeed, 0 - repeatC);
        }
      }
    }
  }

  public move(x: number, y: number, fire: boolean = false): ICommand {
    return { x, y, fire, move: true, timer: 0 };
  }

  public halt(timer: number, fire: boolean = false): ICommand {
    return { x: 6, y: 12, timer, fire, move: false };
  }

  public fire(): ICommand {
    return { timer: 1, move: false, fire: true };
  }

  public cloneCommand(command: ICommand, xOff: number = 0, yOff: number = 0): ICommand {
    return { x: command.x + xOff, y: command.y + yOff, timer: command.timer, move: command.move, fire: command.fire };
  }

  public mirrorCommand(command: ICommand): ICommand {
    return { x: 12 - command.x, y: command.y, timer: command.timer, move: command.move, fire: command.fire };
  }

  public cloneCommands(commands: ICommand[], xOff: number = 0, yOff: number = 0): ICommand[] {
    let m: ICommand[] = [];
    commands.forEach(command => m.push(this.cloneCommand(command, xOff, yOff)));
    return m;
  }

  public mirrorCommands(commands: ICommand[], xOff: number = 0, yOff: number = 0): ICommand[] {
    let m: ICommand[] = [];
    commands.forEach(command => m.push(this.mirrorCommand(command)));
    return m;
  }
}
